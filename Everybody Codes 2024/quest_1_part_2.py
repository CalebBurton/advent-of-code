"""
Everybody Codes 2024
Quest 1, Part 2
"""

input_str = (
    "DDCCxDCABBADDBABADxxCDACBCxBBxBCDAACAAAAABxBABAxADxCBDCBCBABCBACDAxBACACD"
    "ADAAxCACDDAAAABBADBCACBADBDCBDDxCADCxxCADBCBDDDCDCxBADxDxDCBxCBBBACDBDBxA"
    "CCBCxBBABBDCxDCBDCCBxDCABDBDACACAABABDAxADDADCBDDCDxACADBAAxADACABCAAxACB"
    "ACBBAxCxCCxxCBBADDBCxCCACCACDCDDACADACBBCCDCDABCACCDDABCxxADCADDCDCACBxBx"
    "DBCBCDADDDCADCABADCxBxADDxACAAADAABACDDAADDBBABACCCAxCBBCDBxBBAxCABDxAADC"
    "DBDDBDDDBABBADAxxAxDDCxBCBCBBDCBDBCBBBDAAACAAAABCADCDBCAABCCBBCDxCxDDBADx"
    "DCCxDDBDAABBBxCCCxCBCBCACCCCBBDADBDACDBCDAxCADDADBDxCACBDBDCAAAADAABBCxAB"
    "xCxBxCDBBBBDACBBACxDCDACDDBDxDDABACxACACxABABDCBCBBDBBxCBBDAxACxDDCBDDxBx"
    "CCABBADxCDBDDxDADBDCDCDDDBBBCCBACAAxABCxxAABABBBCCBDBBBAABADDCAxCDCBBAABB"
    "AxABCAAxABCCAxBAxBADDABAADADACxxAxCxBDAAADDAxCBADCDDDCDCAABDCCBAxBxxAxDxC"
    "DxDCDCAxBBxCDDxACBBCBDADCDDADxxBBBACDCxCCCCADABBBABDBADACBCCAACCDADDCACxC"
    "DCBDDABBBDCBBABBBDBAACCCDADABDCCxAAABBCAxxxBDCBBCCDDABDDDAACDBBCDADABxDCB"
    "ACBBADBDCDxAxxBxDxAAxBBBBACCCAACCxAxDCxABACDBABDBACBDBDBCDDCACBDxAADBAACB"
    "xxBCxBCxBCCDBAABDDxAABAxxAABAxACDCCCDCxDxDCCBBBxCCxBBDBBCCBBDBBBACAxCCCDA"
    "CDCDADCAAACACxCDBBDCxABBCBDDxDxBACDBCDDDCCAxBBDCAAxADAABxAABCCCACADBCDBxC"
    "DBADBDDDDACBABCDBDDBxBAxADBCCDBCABDADxBDBCAABBCDxxCDADxAxBBCCADDCDACBADBA"
    "BBAAAABBACDxDAAAABAACDADCDxDCABAACAxBCxCDCADDBBCxCCDxAACBADBxDCBCACDDBDBB"
    "CDBACDBBDBCADDBAxCDBBCBDBDxCBDCBADAACCAxDBBDDCBADBAxADCACxCCCAAAxABABDDxD"
    "DADBDCBDDBACCCDBBAxDAxDBCDxBBADBBDDAxBDCBDBACABxCCxCCBBDDACBxABAxBDDBADAD"
    "ADADxDBBBADBACBBxBxBBxAAxBxBAADCxDBxDAABAABDCBACBxCDBxxDBCCAADDBxCCADCCCD"
    "ABACBADDCBxxDxBDAABDCBxDDDDDABBBxDAABCCxADABBDCCABDBCAxxBCDCDABDDCDDCCADD"
    "ADAAACDDCCBBBDxBDAxCDBAxABACDAxCCAAACCACBCACCDDCADCADAxBBCDCACCABCDCACxAA"
    "DAACxDBAADCBABADCDCDABxCBCBDBAAAAABBCBDCBxDAAABDADABADDCDDxADABBDBDBAABCA"
    "CCACACCBDCABDxCDADDxBBxCBCAAxBDCDDCADCDBxBBBACDDACBCAAAxCCCDxxDxDAxBACADA"
    "ADBBCCCDADACxBBDAxAACDDDDBBCCADBCDCxBCDBDCCxCABCBDxADBCDAAABCCACDBxAAxBCA"
    "BCAxCxBACBBCCxBCDDABCxABACBDABAxCxDCCDCBAxDxBAAACxxAAxDCxCABCBxCDAAxCxCCx"
    "CBAABABCDxCxBCCACBBBCAxCDACABADBABCAxDxCxACDBDCDCAABCACBDACBCBBBCBxDACxDx"
    "ADAAxCABCACCCBCCBxDAAACxBBBCC"
)

def get_value(letter: str = None) -> int:
    if letter in [None,'x','A']:
        return 0
    if letter == 'B':
        return 1
    if letter == 'C':
        return 3
    if letter == 'D':
        return 5
    else:
        raise ValueError(
            f"Letter must be A, B, C, D, or x! Got {letter}"
        )

def get_two_values(first_letter: str, second_letter: str) -> int:
    if first_letter == 'x':
        return get_value(second_letter)
    if second_letter == 'x':
        return get_value(first_letter)

    if second_letter is None:
        raise ValueError("second_letter cannot be None")

    # Paired enemies each get a +1 bonus
    return get_value(first_letter) + get_value(second_letter) + 2

values = [get_two_values(input_str[i], input_str[i+1]) for i in range(0, len(input_str), 2)]

total = sum(values)

print(f"Answer: {total}")
